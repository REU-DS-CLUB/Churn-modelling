# -*- coding: utf-8 -*-
"""EDA_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11je1EusMSMVqh2ktugyMngL6C-vO-Tqe
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as plt

df = pd.read_excel('WA_Fn-UseC_-HR-Employee-Attrition.xlsx')
df

df.head(20).T

df.describe().T

df[df['JobSatisfaction'] < 3]['Age'].mean()

df[df['JobSatisfaction'] >= 3]['Age'].mean()

df['MonthlyIncome'].mean()

df[df['MonthlyIncome'] > 6500]['JobSatisfaction'].mean()

df[df['MonthlyIncome'] < 6500]['JobSatisfaction'].mean()

df['MonthlyIncome'].median()

df[df['MonthlyIncome'] < 5000]['JobSatisfaction'].mean()

df[df['Attrition'] == 'Yes']['JobSatisfaction'].mean()

df[df['Attrition'] == 'No']['JobSatisfaction'].mean()

"""Разница почти в 0.3 в удовлетворении работой"""

df[df['Attrition'] == 'Yes']['RelationshipSatisfaction'].mean()

df[df['Attrition'] == 'No']['RelationshipSatisfaction'].mean()

"""Разница почти в 0.2 в отношениях с коллективом"""

df[df['Over18'] == 'N' ].value_counts()

"""Всем больше 18 - ненужный столбец"""

df = df.drop(['Over18', 'StandardHours'], axis=1)

"""Удаление столбца Over18 и StandartHours"""

df[df['Attrition'] == 'Yes']['MonthlyIncome'].mean()

df[df['Attrition'] == 'No']['MonthlyIncome'].mean()

df[df['Attrition'] == 'Yes']['WorkLifeBalance'].mean()

df[df['Attrition'] == 'No']['WorkLifeBalance'].mean()

"""Разница в 0.1 не так уж важна"""

df[(df['StockOptionLevel' ] == 0) & (df['Attrition'] == 'Yes')].value_counts(normalize=True)

"""тех кто ушел, не имея акций компании, всего лишь 10% 
эт явно не ключевой фактор
"""

df[(df['StockOptionLevel' ] == 0) & (df['Attrition'] == 'Yes') & (df['JobSatisfaction'] < 2.7) & (df['RelationshipSatisfaction'] < 2.7)].value_counts(normalize=True)

"""К тому же многие из тех, кто уходил помимо отсутствия акций, имели ниже среднего отношения с коллективом и были не довольны работой"""

df[(df['Attrition'] == 'Yes') & (df['JobSatisfaction'] < 3) & (df['RelationshipSatisfaction'] < 3)].value_counts()

df[(df['Attrition'] == 'Yes') & (df['Department'] == 'Research & Development')]

"""Половина человек из числа увольняющихся были из Research & Development департамента"""

df[(df['Attrition'] == 'Yes') & (df['Department'] == 'Sales')]

df[(df['Attrition'] == 'Yes') & (df['YearsAtCompany'] <= 2)][df['Department'] == 'Research & Development']

df[df['Attrition'] == 'No'][df['Department'] == 'Research & Development'][df['OverTime'] == 'No']['JobInvolvement'].mean()

"""Почти треть кто работал в департаменте 'Research & Development' и  перерабатывал, был меньше вовлечен в работу, чем те, кто работал в этом департаменте и неперерабывал"""

df[df['Attrition'] == 'No'][df['Department'] == 'Research & Development'][df['OverTime'] == 'No']['EnvironmentSatisfaction'].mean()

df[(df['Attrition'] == 'Yes') & (df['MaritalStatus']  == 'Married') & (df['WorkLifeBalance'] == 1)]

"""Большинство женатых людей имели нормальный баланс между жизнью и работой"""

attrited_df = df[df['Attrition'] == 'Yes']
attrited_df = attrited_df.drop(['Age', 'Attrition', 'Education', 'EducationField', 'EmployeeCount', 'EmployeeNumber', 'TotalWorkingYears', 'JobRole', 'Department', 'Gender', 'BusinessTravel', 'MaritalStatus', 'OverTime'], axis=1)кенг
cols = attrited_df.columns
for ind in range(len(cols)):
  print(cols[ind])
  print(attrited_df.iloc[:, ind].mean(), '\n')

unattrited_df = df[df['Attrition'] == 'No']
unattrited_df = unattrited_df.drop(['Age', 'Attrition', 'Education', 'EducationField', 'EmployeeCount', 'EmployeeNumber', 'TotalWorkingYears', 'JobRole', 'Department', 'Gender', 'BusinessTravel', 'MaritalStatus', 'OverTime'], axis=1)
cols = unattrited_df.columns
for ind in range(len(cols)):
  print(cols[ind])
  print(unattrited_df.iloc[:, ind].mean(), '\n')